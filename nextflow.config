/*
 * ------------------------------------------------------
 *  Based on the nf-core/rnaseq Nextflow base config file
 * ------------------------------------------------------
 */

// Include parameters from configuration file
includeConfig "$baseDir/conf/params.config"

includeConfig "$baseDir/conf/base.config"
profiles {
  standard {
    process.executor = 'local'
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  local {
    includeConfig "$baseDir/conf/base.config"
    process.executor = 'local'
  }
  conda { 
    process.conda = "$baseDir/environment.yml" 
  }
  docker { 
    process.container = null
    docker.enabled = true 
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity { 
    process.container = null
    singularity.enabled = true
    singularity.autoMounts = true 
  }
  podman {
    process.container = null
    podman.enabled = true
  }
  uge {
    includeConfig 'conf/eddie.config'
    process.cpus { 1 * task.attempt }
    process.memory { 8.GB * task.attempt }
    process.time { 6.hour * task.attempt }
  }   
  eddie {
    includeConfig "$baseDir/conf/eddie.config"
    singularity.enabled = true
    singularity.autoMounts = true 
  }
  eddie_conda {
    includeConfig "$baseDir/conf/eddie_conda.config"
    process.conda = "$baseDir/environment.yml" 
  }
  sge {
    process.executor = 'sge'
    process.cpus { 1 * task.attempt }
    process.memory { 8.GB * task.attempt }
    process.time { 6.hour * task.attempt }
  }
  slurm {
    process.executor = 'slurm'
  }
  test {
    includeConfig 'conf/test.config'
    docker.enabled = true 
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
}

manifest {
  name            = 'evotools/ADMIXboots'
  author          = 'Andrea Talenti'
  homePage        = 'https://github.com/evotools/ADMIXBoots'
  description     = 'Nextflow booststrapped admixture pipeline.'
  mainScript      = 'main.nf'
  nextflowVersion = '>=21.04.0'
  version         = '2.1'
}



// Add reporting configuration
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}